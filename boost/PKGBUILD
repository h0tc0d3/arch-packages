pkgbase=boost+clang
pkgname=('boost+clang' 'boost-libs+clang')
pkgver=1.80.0
pkgrel=2
pkgdesc="Free peer-reviewed portable C++ source libraries"
arch=('x86_64')
url="https://www.boost.org/"
license=('custom')
makedepends=('icu' 'python' 'python-numpy' 'bzip2' 'zlib' 'openmpi' 'zstd')
_srcname=boost_${pkgver//./_}
source=(
  "https://boostorg.jfrog.io/artifactory/main/release/${pkgver}/source/${_srcname}.tar.bz2"
  boost-ublas-c++20-iterator.patch::https://github.com/boostorg/ublas/commit/a31e5cffa85f.patch
)
sha256sums=('1e19565d82e43bc59209a168f5ac899d3ba471d55c7610c677d4ccf2c9c500c0'
  'aa38addb40d5f44b4a8472029b475e7e6aef1c460509eb7d8edf03491dc1b5ee')

_llvm=0
_toolset=gcc

prepare() {

  if clang --version 2>/dev/null | grep -iq "clang\s*version\s*[0-9]" && ld.lld --version 2>/dev/null | grep -iq "LLD\s*[0-9]"; then
    _llvm=1
  fi

  # https://github.com/boostorg/ublas/pull/97
  patch -d "${_srcname}" -Np2 -i "${srcdir:?}/boost-ublas-c++20-iterator.patch"

}

build() {

  if [[ ${_llvm} -eq 1 ]]; then

    CFLAGS="${CFLAGS} -flto=thin"
    CXXFLAGS="${CXXFLAGS} -flto=thin"
    LDFLAGS="${LDFLAGS} -fuse-ld=lld"
    _toolset=clang

  fi

  cd "${srcdir:?}/${_srcname}/tools/build" || (
    echo -e "\E[1;31mCan't cd to ${srcdir:?}/${_srcname}/tools/build directory! Build Failed! \E[0m"
    exit 1
  )

  ./bootstrap.sh \
    --cxxflags="${CXXFLAGS} ${LDFLAGS}"

  ./b2 install \
    --prefix="${srcdir:?}/fakeinstall"

  ln -s b2 "${srcdir:?}/fakeinstall/bin/bjam"

  cd "${srcdir:?}/${_srcname}" || (
    echo -e "\E[1;31mCan't cd to ${srcdir:?}/${_srcname}/tools/build directory! Build Failed! \E[0m"
    exit 1
  )

  ./bootstrap.sh \
    --with-toolset="${_toolset:?}" \
    --with-icu \
    --with-python=python3

  # support for OpenMPI
  echo "using mpi ;" >>project-config.jam

  # boostbook is needed by quickbook
  install -dm755 "${srcdir:?}/fakeinstall/share/boostbook"
  cp -a tools/boostbook/{xsl,dtd} "${srcdir:?}/fakeinstall/share/boostbook/"

  # install to ${srcdir:?}/fakeinstall in preparation for split packaging
  ./b2 install \
    variant=release \
    debug-symbols=off \
    threading=multi \
    runtime-link=shared \
    link=shared,static \
    toolset="${_toolset:?}" \
    python=3.10 \
    cflags="${CFLAGS} -fPIC" \
    cxxflags="${CXXFLAGS} -fPIC" \
    linkflags="${LDFLAGS}" \
    --layout=system \
    --prefix="${srcdir:?}/fakeinstall" \
    -j "$(nproc)"

}

package_boost+clang() {

  pkgdesc+=' (development headers)'
  depends=("boost-libs+clang=${pkgver}")
  provides=('boost' "boost=${pkgver}")
  conflicts=('boost')
  optdepends=('python: for python bindings')
  options=('staticlibs')

  install -d "${pkgdir:?}/usr/lib"
  cp -a fakeinstall/lib/*.{a,so} "${pkgdir:?}/usr/lib/"
  cp -a fakeinstall/lib/cmake "${pkgdir:?}/usr/lib/"
  cp -a fakeinstall/{bin,include,share} "${pkgdir:?}/usr/"

  # https://github.com/boostorg/python/issues/203#issuecomment-391477685
  for _lib in python numpy; do
    ln -srL "${pkgdir:?}/usr/lib/libboost_${_lib}3"{10,}.so
  done

  install -Dm644 -t "${pkgdir:?}/usr/share/licenses/boost" "${_srcname}/LICENSE_1_0.txt"

}

package_boost-libs+clang() {

  pkgdesc+=' (runtime libraries)'
  depends=('bzip2' 'zlib' 'icu' 'zstd')
  optdepends=('openmpi: for mpi support')
  conflicts=('boost-libs')
  provides=('boost-libs' "boost-libs=${pkgver}"
    libboost_atomic.so libboost_chrono.so libboost_container.so
    libboost_context.so libboost_contract.so libboost_coroutine.so
    libboost_date_time.so libboost_fiber.so libboost_filesystem.so
    libboost_graph.so libboost_graph_parallel.so libboost_iostreams.so
    libboost_json.so libboost_locale.so libboost_log.so libboost_log_setup.so
    libboost_math_c99.so libboost_math_c99f.so libboost_math_c99l.so
    libboost_math_tr1.so libboost_math_tr1f.so libboost_math_tr1l.so
    libboost_mpi.so libboost_numpy310.so
    libboost_prg_exec_monitor.so libboost_program_options.so
    libboost_python310.so libboost_random.so
    libboost_regex.so libboost_serialization.so
    libboost_stacktrace_addr2line.so libboost_stacktrace_basic.so
    libboost_stacktrace_noop.so libboost_system.so libboost_thread.so
    libboost_timer.so libboost_type_erasure.so libboost_unit_test_framework.so
    libboost_wave.so libboost_wserialization.so)

  install -dm755 "${pkgdir:?}/usr/lib"
  cp -a fakeinstall/lib/*.so.* "${pkgdir:?}/usr/lib/"

  # https://github.com/boostorg/mpi/issues/112
  install -d "${pkgdir:?}/usr/lib/python3.10/site-packages/boost"

  touch "${pkgdir:?}/usr/lib/python3.10/site-packages/boost/__init__.py"
  python -m compileall -o 0 -o 1 -o 2 "${pkgdir:?}/usr/lib/python3.10/site-packages/boost"

  cp fakeinstall/lib/boost-python3.10/mpi.so \
    "${pkgdir:?}"/usr/lib/python3.10/site-packages/boost/mpi.so

  install -Dm644 -t "${pkgdir:?}/usr/share/licenses/boost-libs" "${_srcname}/LICENSE_1_0.txt"

}
