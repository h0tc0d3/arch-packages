pkgbase=qemu+clang
pkgname=(
  qemu-common+clang
  qemu-audio-{alsa,dbus,jack,oss,pa,sdl,spice}+clang
  qemu-block-{curl,dmg,gluster,iscsi,nfs,ssh}+clang
  qemu-chardev-{baum,spice}+clang
  qemu-docs+clang
  qemu-guest-agent+clang
  qemu-hw-display-{qxl,virtio-{gpu{,-{gl,pci,pci-gl}},vga{,-gl}}}+clang
  qemu-hw-s390x-virtio-gpu-ccw+clang
  qemu-hw-usb-{host,redirect,smartcard}+clang
  qemu-img+clang
  qemu-pr-helper+clang
  qemu-system-{aarch64,alpha,arm,avr,cris,hppa,m68k,microblaze,mips,nios2,or1k,ppc,riscv,rx,s390x,sh4,sparc,tricore,x86,xtensa}+clang
  qemu-tests+clang
  qemu-tools+clang
  qemu-ui-{curses,dbus,egl-headless,gtk,opengl,sdl,spice-{app,core}}+clang
  qemu-user+clang
  qemu-vhost-user-gpu+clang
  qemu-virtiofsd+clang
  qemu-{base,desktop,emulators-full,full}+clang
)
pkgver=7.0.0
pkgrel=12
pkgdesc="A generic and open source machine emulator and virtualizer"
arch=(x86_64)
url="https://www.qemu.org/"
license=(GPL2 LGPL2.1)
# TODO: consider providing rdma-core
# TODO: consider providing lzfse
# TODO: package systemtap
# TODO: package openbios for qemu-system-{ppc,sparc}
# TODO: package /usr/share/qemu/{efi,pxe}-* for qemu (ipxe)
# TODO: package /usr/share/qemu/slof.bin for qemu-system-ppc (slof)
# TODO: package /usr/share/qemu/sgabios.bin for qemu-system-x86 (sgabios)
# TODO: package static libs of glib2 and pcre for qemu-user-static
makedepends=(
  alsa-lib
  brltty
  bzip2
  cairo
  ceph
  curl
  dtc
  fuse3
  gcc-libs
  gdk-pixbuf2
  glib2
  glusterfs
  gnutls
  gtk3
  jack
  libaio
  libbpf
  libcacard
  libcap-ng
  libepoxy
  libiscsi
  libnfs
  libpng
  libpulse
  libsasl
  libseccomp
  libslirp
  libssh
  liburing
  libusb
  libx11
  libxml2
  libxkbcommon
  lzo
  mesa
  meson
  multipath-tools
  ncurses
  ndctl
  numactl
  pam
  python
  python-sphinx
  python-sphinx_rtd_theme
  sdl2
  sdl2_image
  snappy
  spice-protocol
  spice
  systemd
  usbredir
  vde2
  virglrenderer
  vte3
  zlib
  zstd
)
source=(
  "https://download.qemu.org/qemu-${pkgver}.tar.xz"{,.sig}
  bridge.conf
  qemu-ga.conf
  qemu-sysusers.conf
  65-kvm.rules
  99-qemu-guest-agent.rules
  qemu-7.0.0-virtio-scsi_fix_ctrl_and_event_handler_functions_in_dataplane_mode.patch::https://github.com/qemu/qemu/commit/2f743ef6366c2df4ef51ef3ae318138cdc0125ab.patch
  qemu-7.0.0-virtio-scsi_dont_waste_cpu_polling_the_eventvirtqueue.patch::https://github.com/qemu/qemu/commit/38738f7dbbda90fbc161757b7f4be35b52205552.patch
  qemu-7.0.0-glibc-2.36.patch
)

backup=(
  etc/qemu/bridge.conf
  etc/sasl2/qemu.conf
)

sha256sums=('f6b375c7951f728402798b0baabb2d86478ca53d44cedbefabbe1c46bf46f839'
  'SKIP'
  '13deacdf79d5afb01c48984cc3cd5291341ca5b28d43298e804dc511ce581895'
  '50aa2cd12098f9683409d33fe13c52c548af40a72155d84c9fb9ada6949b194c'
  '36fdb765d3ef4391ac69eecab80fbd760569ed6fdb25543f003cd6b378d796e6'
  'a66f0e791b16b03b91049aac61a25950d93e962e1b2ba64a38c6ad7f609b532c'
  'f2e13f81e52d62154ac9b285d762ecd243a0538c191b549ec2a88b988c83aa36'
  '41712844bfed7c414bad95959a25a4cbf9d80a9cc65de4c2882d3f9194f05ea8'
  'b83a17d5b5d36426d5cc77f35629b0f44c0be1c8443f1c21433994b6a445d95a'
  '1eee1b5d839fdfc5cd5a18f0c769b01228c14781de1368670e2c589cd6903a6e')

validpgpkeys=('CEACC9E15534EBABB82D3FA03353C9CEF108B584') # Michael Roth <flukshun@gmail.com>

_qemu_system_deps=(
  dtc
  fuse3
  gcc-libs
  glib2 libgio-2.0.so libglib-2.0.so libgmodule-2.0.so
  gnutls
  libaio
  libbpf libbpf.so
  libjpeg-turbo libjpeg.so
  libpng
  libsasl
  libseccomp libseccomp.so
  libslirp libslirp.so
  liburing liburing.so
  lzo
  ndctl
  numactl libnuma.so
  pam libpam.so
  pixman libpixman-1.so
  qemu-common
  snappy
  vde2
  zlib
  zstd libzstd.so
)

# TODO: qemu-user-static
#  'qemu-user-static: for static user mode emulation of QEMU targets'
_qemu_optdepends=(
  'qemu-audio-alsa+clang: for ALSA audio driver'
  'qemu-audio-dbus+clang: for D-Bus audio driver'
  'qemu-audio-jack+clang: for JACK audio driver'
  'qemu-audio-oss+clang: for OSS audio driver'
  'qemu-audio-pa+clang: for PulseAudio audio driver'
  'qemu-audio-sdl+clang: for SDL audio driver'
  'qemu-audio-spice+clang: for spice audio driver'
  'qemu-block-curl+clang: for curl block driver'
  'qemu-block-dmg+clang: for DMG block driver'
  'qemu-block-gluster+clang: for Gluster block driver'
  'qemu-block-iscsi+clang: for iSCSI block driver'
  'qemu-block-nfs+clang: for NFS block driver'
  'qemu-block-ssh+clang: for SSH block driver'
  'qemu-chardev-baum+clang: for Baum chardev driver'
  'qemu-chardev-spice+clang: for spice chardev driver'
  'qemu-docs+clang: for documentation'
  'qemu-hw-display-qxl+clang: for QXL display device'
  'qemu-hw-display-virtio-gpu-gl+clang: for virtio-gpu-gl display device'
  'qemu-hw-display-virtio-gpu+clang: for virtio-gpu display device'
  'qemu-hw-display-virtio-gpu-pci+clang: for virtio-gpu-pci display device'
  'qemu-hw-display-virtio-gpu-pci-gl+clang: for virtio-gpu-pci-gl display device'
  'qemu-hw-display-virtio-vga+clang: for virtio-gpu-vga display device'
  'qemu-hw-display-virtio-vga-gl+clang: for virtio-gpu-vga-gl display device'
  'qemu-hw-s390x-virtio-gpu-ccw+clang: for s390x-virtio-gpu-ccw display device'
  'qemu-hw-usb-host+clang: for USB host device'
  'qemu-hw-usb-redirect+clang: for usbredir device'
  'qemu-hw-usb-smartcard+clang: for USB smartcard device'
  'qemu-img+clang: for manipulating disk images'
  'qemu-pr-helper+clang: for persistent reservation utility'
  'qemu-system-aarch64+clang: for AARCH64 system emulator'
  'qemu-system-alpha+clang: for Alpha system emulator'
  'qemu-system-arm+clang: for ARM system emulator'
  'qemu-system-avr+clang: for AVR system emulator'
  'qemu-system-cris+clang: for CRIS system emulator'
  'qemu-system-hppa+clang: for HPPA system emulator'
  'qemu-system-m68k+clang: for ColdFire (m68k) system emulator'
  'qemu-system-microblaze+clang: for Microblaze system emulator'
  'qemu-system-mips+clang: for MIPS system emulator'
  'qemu-system-nios2+clang: for nios2 system emulator'
  'qemu-system-or1k+clang: for OpenRisc32 system emulator'
  'qemu-system-ppc+clang: for PPC system emulator'
  'qemu-system-riscv+clang: for RISC-V system emulator'
  'qemu-system-rx+clang: for RX system emulator'
  'qemu-system-s390x+clang: for S390 system emulator'
  'qemu-system-sh4+clang: for SH4 system emulator'
  'qemu-system-sparc+clang: for SPARC system emulator'
  'qemu-system-tricore+clang: for tricore system emulator'
  'qemu-system-x86+clang: for x86 system emulator'
  'qemu-system-xtensa+clang: for Xtensa system emulator'
  'qemu-tests+clang: for QEMU tests'
  'qemu-tools+clang: for QEMU tools'
  'qemu-ui-curses+clang: for curses UI driver'
  'qemu-ui-dbus+clang: for D-Bus UI driver'
  'qemu-ui-egl-headless+clang: for EGL headless UI driver'
  'qemu-ui-gtk+clang: for GTK UI driver'
  'qemu-ui-opengl+clang: for OpenGL UI driver'
  'qemu-ui-sdl+clang: for SDL UI driver'
  'qemu-ui-spice-app+clang: for spice app UI driver'
  'qemu-ui-spice-core+clang: for spice core UI driver'
  'qemu-user+clang: for user mode emulation of QEMU targets'
  'qemu-vhost-user-gpu+clang: for vhost-user-gpu display device'
  'qemu-virtiofsd+clang: for virtio-fs shared filesystem daemon'
  'samba: for SMB/CIFS server support'
)

_llvm=0

_pick() {

  local p="${1}" f d
  shift

  for f; do
    d="${srcdir:?}/${p}/${f#"${pkgdir:?}"/}"
    mkdir -p "$(dirname "${d}")"
    mv "${f}" "${d}"
    rmdir -p --ignore-fail-on-non-empty "$(dirname "${f}")"

  done

}

prepare() {

  if clang --version 2>/dev/null | grep -iq "clang\s*version\s*[0-9]" && ld.lld --version 2>/dev/null | grep -iq "LLD\s*[0-9]"; then
    _llvm=1
  fi

  # extract licenses for TCG
  sed -n '1,23p' "qemu-${pkgver}/tcg/tcg-internal.h" >tcg.LICENSE.MIT
  sed -n '1,23p' "qemu-${pkgver}/tcg/arm/tcg-target.c.inc" >tcg-arm.LICENSE.MIT
  sed -n '1,23p' "qemu-${pkgver}/tcg/tci/tcg-target.h" >tci.LICENSE.MIT

  # install qemu-pr-helper.socket to sockets.target
  sed -e 's/multi-user.target/sockets.target/g' -i "qemu-${pkgver}/contrib/systemd/qemu-pr-helper.socket"

  # create build dir
  mkdir -vp build
  mkdir -vp build-static

  patch -Np1 -d "qemu-${pkgver}" \
    -i "${srcdir:?}/qemu-7.0.0-virtio-scsi_fix_ctrl_and_event_handler_functions_in_dataplane_mode.patch"
  patch -Np1 -d "qemu-${pkgver}" \
    -i "${srcdir:?}/qemu-7.0.0-virtio-scsi_dont_waste_cpu_polling_the_eventvirtqueue.patch"

  patch -Np1 -d "qemu-${pkgver}" \
    -i "${srcdir:?}/qemu-7.0.0-glibc-2.36.patch"

}

build() {

  cd "${srcdir:?}/build" || (
    echo -e "\E[1;31mCan't cd to ${srcdir:?}/build directory! Build Failed! \E[0m"
    exit 1
  )

  if [[ ${_llvm} -eq 1 ]]; then

    CFLAGS="${CFLAGS} -flto=thin"
    CXXFLAGS="${CXXFLAGS} -flto=thin"
    LDFLAGS="${LDFLAGS} -fuse-ld=lld"

  fi

  "${srcdir:?}/qemu-${pkgver}/configure" \
    --prefix=/usr \
    --sysconfdir=/etc \
    --libexecdir=/usr/lib/qemu \
    --localstatedir=/var \
    --docdir=/usr/share/doc/qemu \
    --enable-modules \
    --enable-sdl \
    --enable-lto \
    --enable-avx2 \
    --enable-bpf \
    --enable-kvm \
    --enable-zstd \
    --enable-selinux \
    --enable-slirp=system \
    --enable-tpm \
    --smbd=/usr/bin/smbd \
    --with-coroutine=ucontext

  ninja

}

package_qemu-common+clang() {

  license+=(BSD MIT)
  depends=(gcc-libs glib2 libglib-2.0.so libgmodule-2.0.so hicolor-icon-theme libcap-ng libcap-ng.so)
  install=qemu-common.install
  provides=(qemu-common)
  conflicts=(qemu-common)

  meson install -C build --destdir "${pkgdir:?}"

  install -vdm 755 "${pkgdir:?}/usr/lib/binfmt.d/"
  "qemu-${pkgver}/scripts/qemu-binfmt-conf.sh" --systemd ALL --exportdir "${pkgdir:?}/usr/lib/binfmt.d/" --qemu-path "/usr/bin"

  install -vDm 644 bridge.conf -t "${pkgdir:?}/etc/qemu/"
  install -vDm 644 "qemu-${pkgver}/qemu.sasl" "${pkgdir:?}/etc/sasl2/qemu.conf"
  install -vDm 644 "qemu-${pkgver}/LICENSE" -t "${pkgdir:?}/usr/share/licenses/qemu/"
  install -vDm 644 tcg.LICENSE.MIT tcg-arm.LICENSE.MIT tci.LICENSE.MIT -t "${pkgdir:?}/usr/share/licenses/qemu/"
  install -vDm 644 qemu-sysusers.conf "${pkgdir:?}/usr/lib/sysusers.d/qemu.conf"

  # bridge_helper needs suid: https://bugs.archlinux.org/task/32565
  chmod u+s "${pkgdir:?}/usr/lib/qemu/qemu-bridge-helper"

  # remoe invalid directory
  rm -frv "${pkgdir:?}/var"

  # remove unneeded files
  find "${pkgdir:?}" -name .buildinfo -delete

  # remove files provided by seabios
  rm -fv "${pkgdir:?}/usr/share/qemu/"{bios,vgabios}*

  # remove files provided by edk2-{armvirt,ovmf}
  find "${pkgdir:?}/usr/share/qemu" -name "edk2-*" -delete
  rm -fv "${pkgdir:?}/usr/share/qemu/edk2-"*
  rm -frv "${pkgdir:?}/usr/share/qemu/firmware"

  # pick files for all split packages
  cd "${pkgdir:?}" || (
    echo -e "\E[1;31mCan't cd to ${pkgdir:?} directory! Package Failed! \E[0m"
    exit 1
  )
  _pick qemu-guest-agent+clang usr/bin/qemu-ga
  _pick qemu-guest-agent+clang usr/share/man/man8/qemu-ga.8*

  _pick qemu-audio-alsa+clang usr/lib/qemu/audio-alsa.so
  _pick qemu-audio-dbus+clang usr/lib/qemu/audio-dbus.so
  _pick qemu-audio-jack+clang usr/lib/qemu/audio-jack.so
  _pick qemu-audio-oss+clang usr/lib/qemu/audio-oss.so
  _pick qemu-audio-pa+clang usr/lib/qemu/audio-pa.so
  _pick qemu-audio-sdl+clang usr/lib/qemu/audio-sdl.so
  _pick qemu-audio-spice+clang usr/lib/qemu/audio-spice.so

  _pick qemu-block-curl+clang usr/lib/qemu/block-curl.so
  _pick qemu-block-dmg+clang usr/lib/qemu/block-dmg*.so
  _pick qemu-block-gluster+clang usr/lib/qemu/block-gluster.so
  _pick qemu-block-iscsi+clang usr/lib/qemu/block-iscsi.so
  _pick qemu-block-nfs+clang usr/lib/qemu/block-nfs.so
  _pick qemu-block-ssh+clang usr/lib/qemu/block-ssh.so

  _pick qemu-chardev-baum+clang usr/lib/qemu/chardev-baum.so
  _pick qemu-chardev-spice+clang usr/lib/qemu/chardev-spice.so

  _pick qemu-docs+clang usr/share/doc/qemu

  _pick qemu-hw-display-qxl+clang usr/lib/qemu/hw-display-qxl.so
  _pick qemu-hw-display-virtio-gpu+clang usr/lib/qemu/hw-display-virtio-gpu.so
  _pick qemu-hw-display-virtio-gpu-gl+clang usr/lib/qemu/hw-display-virtio-gpu-gl.so
  _pick qemu-hw-display-virtio-gpu-pci+clang usr/lib/qemu/hw-display-virtio-gpu-pci.so
  _pick qemu-hw-display-virtio-gpu-pci-gl+clang usr/lib/qemu/hw-display-virtio-gpu-pci-gl.so
  _pick qemu-hw-display-virtio-vga+clang usr/lib/qemu/hw-display-virtio-vga.so
  _pick qemu-hw-display-virtio-vga-gl+clang usr/lib/qemu/hw-display-virtio-vga-gl.so

  _pick qemu-hw-usb-host+clang usr/lib/qemu/hw-usb-host.so
  _pick qemu-hw-usb-redirect+clang usr/lib/qemu/hw-usb-redirect.so
  _pick qemu-hw-usb-smartcard+clang usr/lib/qemu/hw-usb-smartcard.so

  _pick qemu-img+clang usr/bin/qemu-{img,io,nbd,storage-daemon}
  _pick qemu-img+clang usr/share/man/man1/qemu-{img,storage-daemon}.1*
  _pick qemu-img+clang usr/share/man/man7/qemu-storage-daemon-qmp-ref.7*
  _pick qemu-img+clang usr/share/man/man8/qemu-nbd.8*

  _pick qemu-pr-helper+clang usr/bin/qemu-pr-helper
  _pick qemu-pr-helper+clang usr/share/man/man8/qemu-pr-helper.8*

  _pick qemu-hw-s390x-virtio-gpu-ccw+clang usr/lib/qemu/hw-s390x-virtio-gpu-ccw.so

  _pick qemu-system-aarch64+clang usr/bin/qemu-system-aarch64

  _pick qemu-system-alpha+clang usr/bin/qemu-system-alpha
  _pick qemu-system-alpha+clang usr/share/qemu/palcode-clipper

  _pick qemu-system-arm+clang usr/bin/qemu-system-arm
  _pick qemu-system-arm+clang usr/share/qemu/npcm7xx_bootrom.bin

  _pick qemu-system-avr+clang usr/bin/qemu-system-avr

  _pick qemu-system-cris+clang usr/bin/qemu-system-cris

  _pick qemu-system-hppa+clang usr/bin/qemu-system-hppa
  _pick qemu-system-hppa+clang usr/share/qemu/hppa-firmware.img

  _pick qemu-system-m68k+clang usr/bin/qemu-system-m68k

  _pick qemu-system-microblaze+clang usr/bin/qemu-system-microblaze{,el}
  _pick qemu-system-microblaze+clang usr/share/qemu/petalogix-*.dtb

  _pick qemu-system-mips+clang usr/bin/qemu-system-mips{,64,64el,el}

  _pick qemu-system-nios2+clang usr/bin/qemu-system-nios2

  _pick qemu-system-or1k+clang usr/bin/qemu-system-or1k

  _pick qemu-system-ppc+clang usr/bin/qemu-system-ppc{,64}
  _pick qemu-system-ppc+clang usr/share/qemu/{bamboo,canyonlands}.dtb
  # NOTE: needs to be replaced by openbios
  _pick qemu-system-ppc+clang usr/share/qemu/openbios-ppc
  _pick qemu-system-ppc+clang usr/share/qemu/qemu_vga.ndrv
  _pick qemu-system-ppc+clang usr/share/qemu/skiboot.lid
  # NOTE: needs to be replaced by slof
  _pick qemu-system-ppc+clang usr/share/qemu/slof.bin
  _pick qemu-system-ppc+clang usr/share/qemu/u-boot.e500
  _pick qemu-system-ppc+clang usr/share/qemu/u-boot-sam460-20100605.bin

  _pick qemu-system-riscv+clang usr/bin/qemu-system-riscv{32,64}
  _pick qemu-system-riscv+clang usr/share/qemu/opensbi-riscv{32,64}*.bin

  _pick qemu-system-rx+clang usr/bin/qemu-system-rx

  _pick qemu-system-s390x+clang usr/bin/qemu-system-s390x
  _pick qemu-system-s390x+clang usr/share/qemu/s390-{ccw,netboot}.img

  _pick qemu-system-sh4+clang usr/bin/qemu-system-sh4{,eb}

  _pick qemu-system-sparc+clang usr/bin/qemu-system-sparc{,64}
  # NOTE: needs to be replaced by openbios
  _pick qemu-system-sparc+clang usr/share/qemu/openbios-sparc{32,64}
  _pick qemu-system-sparc+clang usr/share/qemu/QEMU,{cgthree,tcx}.bin

  _pick qemu-system-tricore+clang usr/bin/qemu-system-tricore

  _pick qemu-system-x86+clang usr/bin/qemu-system-{i386,x86_64}
  _pick qemu-system-x86+clang usr/lib/qemu/accel-tcg-{i386,x86_64}.so
  _pick qemu-system-x86+clang usr/share/qemu/{kvmvapic,linuxboot,multiboot{,_dma},pvh}.bin
  _pick qemu-system-x86+clang usr/share/qemu/qboot.rom
  # NOTE: needs to be replaced by sgabios
  _pick qemu-system-x86+clang usr/share/qemu/sgabios.bin

  _pick qemu-system-xtensa+clang usr/bin/qemu-system-xtensa{,eb}

  _pick qemu-tests+clang usr/lib/qemu/accel-qtest-*.so

  _pick qemu-tools+clang usr/bin/{elf2dmp,qemu-{edid,keymap}}
  _pick qemu-tools+clang usr/share/qemu/trace-events-all

  _pick qemu-ui-curses+clang usr/lib/qemu/ui-curses.so
  _pick qemu-ui-dbus+clang usr/lib/qemu/ui-dbus.so
  _pick qemu-ui-egl-headless+clang usr/lib/qemu/ui-egl-headless.so
  _pick qemu-ui-gtk+clang usr/lib/qemu/ui-gtk.so
  _pick qemu-ui-opengl+clang usr/lib/qemu/ui-opengl.so
  _pick qemu-ui-sdl+clang usr/lib/qemu/ui-sdl.so
  _pick qemu-ui-spice-app+clang usr/lib/qemu/ui-spice-app.so
  _pick qemu-ui-spice-core+clang usr/lib/qemu/ui-spice-core.so

  #    _pick qemu-user-static usr/bin/qemu-*-static
  #    _pick qemu-user-static usr/lib/binfmt.d/*-static.conf

  _pick qemu-user+clang usr/bin/qemu-{aarch64{,_be},alpha,arm{,eb},cris,hexagon,hppa,i386,m68k,microblaze{,el},mips{,64,64el,el,n32,n32el},nios2,or1k,ppc{,64,64le},riscv{32,64},s390x,sh4{,eb},sparc{,32plus,64},x86_64,xtensa{,eb}}
  _pick qemu-user+clang usr/lib/binfmt.d/*.conf

  _pick qemu-vhost-user-gpu+clang usr/lib/qemu/vhost-user-gpu
  _pick qemu-vhost-user-gpu+clang usr/share/qemu/vhost-user/50-qemu-gpu.json

  _pick qemu-virtiofsd+clang usr/lib/qemu/virtiofsd
  _pick qemu-virtiofsd+clang usr/share/qemu/vhost-user/50-qemu-virtiofsd.json

}

package_qemu-audio-alsa+clang() {

  pkgdesc="QEMU ALSA audio driver"
  depends=(alsa-lib libasound.so glibc qemu-common+clang)
  provides=(qemu-audio-alsa)
  conflicts=(qemu-audio-alsa)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-audio-dbus+clang() {

  pkgdesc="QEMU D-Bus audio driver"
  depends=(gcc-libs glib2 libgio-2.0.so libgobject-2.0.so libglib-2.0.so glibc qemu-common+clang)
  provides=(qemu-audio-dbus)
  conflicts=(qemu-audio-dbus)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-audio-jack+clang() {

  pkgdesc="QEMU JACK audio driver"
  depends=(jack libjack.so glibc qemu-common+clang)
  provides=(qemu-audio-jack)
  conflicts=(qemu-audio-jack)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-audio-oss+clang() {

  pkgdesc="QEMU OSS audio driver"
  depends=(glibc qemu-common+clang)
  provides=(qemu-audio-oss)
  conflicts=(qemu-audio-oss)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-audio-pa+clang() {

  pkgdesc="QEMU PulseAudio audio driver"
  depends=(glibc libpulse libpulse.so qemu-common+clang)
  provides=(qemu-audio-pa)
  conflicts=(qemu-audio-pa)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-audio-sdl+clang() {

  pkgdesc="QEMU SDL audio driver"
  depends=(glibc qemu-common+clang sdl2)
  provides=(qemu-audio-sdl)
  conflicts=(qemu-audio-sdl)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-audio-spice+clang() {

  pkgdesc="QEMU spice audio driver"
  depends=(glibc qemu-common+clang qemu-ui-spice-core+clang spice libspice-server.so)
  provides=(qemu-audio-spice)
  conflicts=(qemu-audio-spice)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-block-curl+clang() {

  pkgdesc="QEMU curl block driver"
  depends=(curl libcurl.so gcc-libs glibc qemu-common+clang)
  provides=(qemu-block-curl)
  conflicts=(qemu-block-curl)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-block-dmg+clang() {

  pkgdesc="QEMU DMG block driver"
  depends=(bzip2 libbz2.so glibc qemu-common+clang)
  provides=(qemu-block-dmg)
  conflicts=(qemu-block-dmg)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-block-gluster+clang() {

  pkgdesc="QEMU Gluster block driver"
  depends=(glibc glusterfs qemu-common+clang)
  provides=(qemu-block-gluster)
  conflicts=(qemu-block-gluster)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-block-iscsi+clang() {

  pkgdesc="QEMU iSCSI block driver"
  depends=(gcc-libs glibc libiscsi qemu-common+clang)
  provides=(qemu-block-iscsi)
  conflicts=(qemu-block-iscsi)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-block-nfs+clang() {

  pkgdesc="QEMU NFS block driver"
  depends=(gcc-libs glibc libnfs qemu-common+clang)
  provides=(qemu-block-nfs)
  conflicts=(qemu-block-nfs)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-block-ssh+clang() {

  pkgdesc="QEMU SSH block driver"
  depends=(gcc-libs glibc libssh libssh.so qemu-common+clang)
  provides=(qemu-block-ssh)
  conflicts=(qemu-block-ssh)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-chardev-baum+clang() {

  pkgdesc="QEMU Baum chardev driver"
  depends=(brltty libbrlapi.so glibc qemu-common+clang)
  provides=(qemu-chardev-baum)
  conflicts=(qemu-chardev-baum)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-chardev-spice+clang() {

  pkgdesc="QEMU spice chardev driver"
  depends=(libspice-server.so glibc qemu-common+clang qemu-ui-spice-core+clang)
  provides=(qemu-chardev-spice)
  conflicts=(qemu-chardev-spice)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-docs+clang() {

  pkgdesc+=" - documentation"
  provides=(qemu-docs)
  conflicts=(qemu-docs)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-guest-agent+clang() {

  pkgdesc="QEMU Guest Agent"
  depends=(gcc-libs glib2 libglib-2.0.so libgmodule-2.0.so glibc liburing liburing.so systemd-libs libudev.so)
  provides=(qemu-guest-agent)
  conflicts=(qemu-guest-agent)
  backup=(
    etc/qemu/qemu-ga.conf
    etc/qemu/fsfreeze-hook
  )
  install=qemu-guest-agent.install

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

  install -vDm 644 "qemu-${pkgver}/contrib/systemd/qemu-guest-agent.service" -t "${pkgdir:?}/usr/lib/systemd/system/"
  install -vDm 644 99-qemu-guest-agent.rules -t "${pkgdir:?}/usr/lib/udev/rules.d/"
  install -vDm 644 qemu-ga.conf -t "${pkgdir:?}/etc/qemu/"
  install -vDm 755 "qemu-${pkgver}/scripts/qemu-guest-agent/fsfreeze-hook" -t "${pkgdir:?}/etc/qemu/"
  install -vdm 755 "${pkgdir:?}/etc/qemu/fsfreeze-hook.d"

}

package_qemu-hw-display-qxl+clang() {

  pkgdesc="QEMU QXL display device"
  depends=(gcc-libs glibc pixman libpixman-1.so qemu-common+clang qemu-ui-spice-core+clang spice libspice-server.so)
  provides=(qemu-hw-display-qxl)
  conflicts=(qemu-hw-display-qxl)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-hw-display-virtio-gpu+clang() {

  pkgdesc="QEMU virtio-gpu display device"
  depends=(glibc pixman libpixman-1.so qemu-common+clang)
  provides=(qemu-hw-display-virtio-gpu)
  conflicts=(qemu-hw-display-virtio-gpu)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-hw-display-virtio-gpu-gl+clang() {

  pkgdesc="QEMU virtio-gpu-gl display device"
  depends=(glibc qemu-common+clang virglrenderer)
  provides=(qemu-hw-display-virtio-gpu-gl)
  conflicts=(qemu-hw-display-virtio-gpu-gl)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-hw-display-virtio-gpu-pci+clang() {

  pkgdesc="QEMU virtio-gpu-pci display device"
  depends=(qemu-common+clang)
  provides=(qemu-hw-display-virtio-gpu-pci)
  conflicts=(qemu-hw-display-virtio-gpu-pci)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-hw-display-virtio-gpu-pci-gl+clang() {

  pkgdesc="QEMU virtio-gpu-pci-gl display device"
  depends=(qemu-common+clang)
  provides=(qemu-hw-display-virtio-gpu-pci-gl)
  conflicts=(qemu-hw-display-virtio-gpu-pci-gl)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-hw-display-virtio-vga+clang() {

  pkgdesc="QEMU virtio-vga display device"
  depends=(qemu-common+clang)
  provides=(qemu-hw-display-virtio-vga)
  conflicts=(qemu-hw-display-virtio-vga)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-hw-display-virtio-vga-gl+clang() {

  pkgdesc="QEMU virtio-vga-gl display device"
  depends=(qemu-common+clang)
  provides=(qemu-hw-display-virtio-vga-gl)
  conflicts=(qemu-hw-display-virtio-vga-gl)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-hw-s390x-virtio-gpu-ccw+clang() {

  pkgdesc="QEMU s390x-virtio-gpu-ccw display device"
  depends=(qemu-common+clang)
  provides=(qemu-hw-s390x-virtio-gpu-ccw)
  conflicts=(qemu-hw-s390x-virtio-gpu-ccw)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-system-aarch64+clang() {

  pkgdesc="QEMU system emulator for AARCH64"
  depends=("${_qemu_system_deps[@]}" edk2-armvirt systemd-libs libudev.so)
  provides=(qemu-system-aarch64)
  conflicts=(qemu-system-aarch64)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-system-alpha+clang() {

  pkgdesc="QEMU system emulator for Alpha"
  depends=("${_qemu_system_deps[@]}" systemd-libs libudev.so)
  provides=(qemu-system-alpha)
  conflicts=(qemu-system-alpha)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-system-arm+clang() {

  pkgdesc="QEMU system emulator for ARM"
  depends=("${_qemu_system_deps[@]}" systemd-libs libudev.so)
  provides=(qemu-system-arm)
  conflicts=(qemu-system-arm)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-system-avr+clang() {

  pkgdesc="QEMU system emulator for AVR"
  depends=("${_qemu_system_deps[@]}")
  provides=(qemu-system-avr)
  conflicts=(qemu-system-avr)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-system-cris+clang() {

  pkgdesc="QEMU system emulator for CRIS"
  depends=("${_qemu_system_deps[@]}")
  provides=(qemu-system-cris)
  conflicts=(qemu-system-cris)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-system-hppa+clang() {

  pkgdesc="QEMU system emulator for HPPA"
  depends=("${_qemu_system_deps[@]}" systemd-libs libudev.so)
  provides=(qemu-system-hppa)
  conflicts=(qemu-system-hppa)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-system-m68k+clang() {

  pkgdesc="QEMU system emulator for ColdFire (m68k)"
  depends=("${_qemu_system_deps[@]}")
  provides=(qemu-system-m68k)
  conflicts=(qemu-system-m68k)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-system-microblaze+clang() {

  pkgdesc="QEMU system emulator for Microblaze"
  depends=("${_qemu_system_deps[@]}")
  provides=(qemu-system-microblaze)
  conflicts=(qemu-system-microblaze)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-system-mips+clang() {

  pkgdesc="QEMU system emulator for MIPS"
  depends=("${_qemu_system_deps[@]}" systemd-libs libudev.so)
  provides=(qemu-system-mips)
  conflicts=(qemu-system-mips)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-system-nios2+clang() {

  pkgdesc="QEMU system emulator for nios2"
  depends=("${_qemu_system_deps[@]}")
  provides=(qemu-system-nios2)
  conflicts=(qemu-system-nios2)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-system-or1k+clang() {

  pkgdesc="QEMU system emulator for OpenRisc32"
  depends=("${_qemu_system_deps[@]}")
  provides=(qemu-system-or1k)
  conflicts=(qemu-system-or1k)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-system-ppc+clang() {

  pkgdesc="QEMU system emulator for PPC"
  # NOTE: will require openbios
  depends=("${_qemu_system_deps[@]}" systemd-libs libudev.so)
  provides=(qemu-system-ppc)
  conflicts=(qemu-system-ppc)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-system-riscv+clang() {

  pkgdesc="QEMU system emulator for RISC-V"
  depends=("${_qemu_system_deps[@]}" systemd-libs libudev.so)
  provides=(qemu-system-riscv)
  conflicts=(qemu-system-riscv)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-system-rx+clang() {

  pkgdesc="QEMU system emulator for RX"
  depends=("${_qemu_system_deps[@]}")
  provides=(qemu-system-rx)
  conflicts=(qemu-system-rx)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-system-s390x+clang() {

  pkgdesc="QEMU system emulator for S390"
  depends=("${_qemu_system_deps[@]}")
  provides=(qemu-system-s390x)
  conflicts=(qemu-system-s390x)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-system-sh4+clang() {

  pkgdesc="QEMU system emulator for SH4"
  depends=("${_qemu_system_deps[@]}" systemd-libs libudev.so)
  provides=(qemu-system-sh4)
  conflicts=(qemu-system-sh4)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-system-sparc+clang() {

  pkgdesc="QEMU system emulator for SPARC"
  # NOTE: will require openbios
  depends=("${_qemu_system_deps[@]}" systemd-libs libudev.so)
  provides=(qemu-system-sparc)
  conflicts=(qemu-system-sparc)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-system-tricore+clang() {

  pkgdesc="QEMU system emulator for tricore"
  depends=("${_qemu_system_deps[@]}")
  provides=(qemu-system-tricore)
  conflicts=(qemu-system-tricore)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-system-x86+clang() {

  pkgdesc="QEMU system emulator for x86"
  depends=("${_qemu_system_deps[@]}" edk2-ovmf seabios systemd-libs libudev.so)
  provides=(qemu-system-x86)
  conflicts=(qemu-system-x86)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-system-xtensa+clang() {

  pkgdesc="QEMU system emulator for Xtensa"
  depends=("${_qemu_system_deps[@]}" systemd-libs libudev.so)
  provides=(qemu-system-xtensa)
  conflicts=(qemu-system-xtensa)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-hw-usb-host+clang() {

  pkgdesc="QEMU USB host device"
  depends=(glibc libusb libusb-1.0.so qemu-common+clang)
  provides=(qemu-hw-usb-host)
  conflicts=(qemu-hw-usb-host)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-hw-usb-redirect+clang() {

  pkgdesc="QEMU usbredir device"
  depends=(gcc-libs glibc qemu-common+clang usbredir)
  provides=(qemu-hw-usb-redirect)
  conflicts=(qemu-hw-usb-redirect)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-hw-usb-smartcard+clang() {

  pkgdesc="QEMU USB smartcard device"
  depends=(gcc-libs libcacard glib2 libglib-2.0.so glibc qemu-common+clang)
  provides=(qemu-hw-usb-smartcard)
  conflicts=(qemu-hw-usb-smartcard)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-img+clang() {

  pkgdesc="QEMU tooling for manipulating disk images"
  depends=(fuse3 gcc-libs glib2 libglib-2.0.so libgmodule-2.0.so glibc gnutls libaio liburing
    liburing.so pam libpam.so zlib zstd libzstd.so)
  provides=(qemu-img)
  conflicts=(qemu-img)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-pr-helper+clang() {

  pkgdesc="QEMU persistent reservation utility"
  depends=(gcc-libs glib2 libglib-2.0.so libgmodule-2.0.so glibc gnutls
    libcap-ng libcap-ng.so liburing liburing.so multipath-tools pam libpam.so qemu-common+clang)
  provides=(qemu-pr-helper)
  conflicts=(qemu-pr-helper)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"
  install -vDm 644 "qemu-${pkgver}/contrib/systemd/qemu-pr-helper."{service,socket} -t "${pkgdir:?}/usr/lib/systemd/system/"

}

package_qemu-tests+clang() {

  pkgdesc="QEMU tests"
  depends=(qemu-common+clang)
  provides=(qemu-tests)
  conflicts=(qemu-tests)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-tools+clang() {

  pkgdesc="QEMU tools"
  depends=(curl libcurl.so gcc-libs glib2 libglib-2.0.so libgmodule-2.0.so glibc
    libxkbcommon libxkbcommon.so python qemu-common+clang)
  provides=(qemu-tools)
  conflicts=(qemu-tools)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

  install -vDm 644 "qemu-${pkgver}/scripts/dump-guest-memory.py" -t "${pkgdir:?}/usr/share/qemu/"
  install -vDm 755 "qemu-${pkgver}/scripts/simpletrace.py" -t "${pkgdir:?}/usr/share/qemu/"
  install -vDm 644 "qemu-${pkgver}/scripts/tracetool/"*.py -t "${pkgdir:?}/usr/share/qemu/tracetool/"
  install -vDm 644 "qemu-${pkgver}/scripts/tracetool/backend/"*.py -t "${pkgdir:?}/usr/share/qemu/tracetool/backend/"
  install -vDm 644 "qemu-${pkgver}/scripts/tracetool/format/"*.py -t "${pkgdir:?}/usr/share/qemu/tracetool/format/"

}

package_qemu-ui-curses+clang() {

  pkgdesc="QEMU curses UI driver"
  depends=(gcc-libs glib2 libglib-2.0.so glibc ncurses libncursesw.so qemu-common+clang)
  provides=(qemu-ui-curses)
  conflicts=(qemu-ui-curses)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-ui-dbus+clang() {

  pkgdesc="QEMU D-Bus UI driver"
  depends=(gcc-libs glib2 libgio-2.0.so libgobject-2.0.so libglib-2.0.so glibc libepoxy pixman libpixman-1.so qemu-common+clang)
  provides=(qemu-ui-dbus)
  conflicts=(qemu-ui-dbus)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-ui-egl-headless+clang() {

  pkgdesc="QEMU EGL headless UI driver"
  depends=(glibc libepoxy qemu-common+clang qemu-ui-opengl+clang)
  provides=(qemu-ui-egl-headless)
  conflicts=(qemu-ui-egl-headless)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-ui-gtk+clang() {

  pkgdesc="QEMU GTK UI driver"
  depends=(
    cairo
    gcc-libs
    gdk-pixbuf2 libgdk_pixbuf-2.0.so
    glib2 libgobject-2.0.so libglib-2.0.so
    glibc
    gtk3 libgdk-3.so libgtk-3.so
    libepoxy
    libx11
    pixman libpixman-1.so
    qemu-common+clang
    qemu-ui-opengl+clang
    vte3 libvte-2.91.so
  )
  provides=(qemu-ui-gtk)
  conflicts=(qemu-ui-gtk)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-ui-opengl+clang() {

  pkgdesc="QEMU OpenGL UI driver"
  depends=(glibc libepoxy mesa pixman libpixman-1.so qemu-common+clang)
  provides=(qemu-ui-opengl)
  conflicts=(qemu-ui-opengl)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-ui-sdl+clang() {

  pkgdesc="QEMU SDL UI driver"
  depends=(glib2 libglib-2.0.so glibc libx11 pixman libpixman-1.so qemu-common+clang sdl2_image sdl2)
  provides=(qemu-ui-sdl)
  conflicts=(qemu-ui-sdl)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"
}

package_qemu-ui-spice-app+clang() {

  pkgdesc="QEMU spice app UI driver"
  depends=(glib2 libgio-2.0.so libglib-2.0.so glibc qemu-common+clang qemu-chardev-spice+clang qemu-ui-spice-core+clang)
  provides=(qemu-ui-spice-app)
  conflicts=(qemu-ui-spice-app)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-ui-spice-core+clang() {

  pkgdesc="QEMU spice core UI driver"
  depends=(gcc-libs glibc pixman libpixman-1.so qemu-common+clang qemu-ui-opengl+clang spice libspice-server.so)
  provides=(qemu-ui-spice-core)
  conflicts=(qemu-ui-spice-core)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-user+clang() {

  pkgdesc="QEMU user mode emulation"
  depends=(gcc-libs glib2 libglib-2.0.so libgmodule-2.0.so glibc gnutls liburing liburing.so qemu-common+clang zlib)
  provides=(qemu-user)
  conflicts=(qemu-user)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

# package_qemu-user-static+clang() {

#   pkgdesc="QEMU static user mode emulation"
#   depends=(glibc)
#   provides=(qemu-user-static)
#   conflicts=(qemu-user-static)
#   mv -v "${pkgname:?}/"* "${pkgdir:?}"

# }

package_qemu-vhost-user-gpu+clang() {

  pkgdesc="QEMU vhost-user-gpu display device"
  depends=(gcc-libs glib2 libglib-2.0.so libgmodule-2.0.so glibc pixman libpixman-1.so mesa qemu-common+clang virglrenderer)
  provides=(qemu-vhost-user-gpu)
  conflicts=(qemu-vhost-user-gpu)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-virtiofsd+clang() {

  pkgdesc="QEMU virtio-fs shared filesystem daemon"
  depends=(gcc-libs glib2 libglib-2.0.so libgmodule-2.0.so glibc libcap-ng libcap-ng.so libseccomp libseccomp.so qemu-common+clang)
  provides=(qemu-virtiofsd)
  conflicts=(qemu-virtiofsd)

  mv -v "${pkgname:?}/"* "${pkgdir:?}"

}

package_qemu-base+clang() {

  pkgdesc="A basic QEMU setup for headless environments"
  depends=(
    qemu-common+clang
    qemu-audio-spice+clang
    qemu-block-{curl,dmg,nfs,ssh}+clang
    qemu-chardev-spice+clang
    qemu-hw-display-{qxl,virtio-gpu{,-{gl,pci,pci-gl}}}+clang
    qemu-hw-display-virtio-vga{,-gl}+clang
    qemu-hw-s390x-virtio-gpu-ccw+clang
    qemu-hw-usb-{host,redirect,smartcard}+clang
    qemu-img+clang
    qemu-pr-helper+clang
    qemu-system-x86+clang
    qemu-tools+clang
    qemu-ui-{curses,spice-{app,core}}+clang
    qemu-virtiofsd+clang
  )
  optdepends=("${_qemu_optdepends[@]}")
  # TODO: remove conflicts/provides/replaces for qemu-headless after 2022-10-01
  conflicts=(qemu qemu-headless qemu-base)
  provides=("qemu=${pkgver}" qemu-headless qemu-base)
  replaces=(qemu-headless)

}

package_qemu-desktop+clang() {

  pkgdesc="A QEMU setup for desktop environments"
  depends=(
    qemu-common+clang
    qemu-audio-{alsa,dbus,jack,oss,pa,sdl,spice}+clang
    qemu-block-{curl,dmg,nfs,ssh}+clang
    qemu-chardev-spice+clang
    qemu-hw-display-{qxl,virtio-gpu{,-{gl,pci,pci-gl}}}+clang
    qemu-hw-display-virtio-vga{,-gl}+clang
    qemu-hw-s390x-virtio-gpu-ccw+clang
    qemu-hw-usb-{host,redirect,smartcard}+clang
    qemu-img+clang
    qemu-pr-helper+clang
    qemu-system-x86+clang
    qemu-tools+clang
    qemu-ui-{curses,dbus,egl-headless,gtk,opengl,sdl,spice-{app,core}}+clang
    qemu-vhost-user-gpu+clang
    qemu-virtiofsd+clang
  )

  optdepends=("${_qemu_optdepends[@]}")
  conflicts=(qemu qemu-desktop)
  provides=("qemu=${pkgver}" qemu-desktop)
  replaces=('qemu<7')

}

package_qemu-emulators-full+clang() {

  pkgdesc="All QEMU user mode and system emulators"
  depends=(
    qemu-system-{aarch64,alpha,arm,avr,cris,hppa,m68k,microblaze,mips,nios2,or1k,ppc,riscv,rx,s390x,sh4,sparc,tricore,x86,xtensa}+clang
    qemu-user+clang
  )
  # TODO: remove conflicts/provides/replaces after 2022-10-01
  conflicts=(qemu-arch-extra qemu-headless-arch-extra qemu-emulators-full)
  provides=(qemu-arch-extra qemu-headless-arch-extra qemu-emulators-full)
  replaces=(qemu-arch-extra qemu-headless-arch-extra qemu-emulators-full)

}

package_qemu-full+clang() {

  pkgdesc="A full QEMU setup"
  depends=(
    qemu-common+clang
    qemu-audio-{alsa,dbus,jack,oss,pa,sdl,spice}+clang
    qemu-block-{curl,dmg,gluster,iscsi,nfs,ssh}+clang
    qemu-chardev-{baum,spice}+clang
    qemu-docs+clang
    qemu-hw-display-{qxl,virtio-{gpu{,-{gl,pci,pci-gl}},vga{,-gl}}}+clang
    qemu-hw-s390x-virtio-gpu-ccw+clang
    qemu-hw-usb-{host,redirect,smartcard}+clang
    qemu-img+clang
    qemu-pr-helper+clang
    qemu-system-{aarch64,alpha,arm,avr,cris,hppa,m68k,microblaze,mips,nios2,or1k,ppc,riscv,rx,s390x,sh4,sparc,tricore,x86,xtensa}+clang
    qemu-tools+clang
    qemu-ui-{curses,dbus,egl-headless,gtk,opengl,sdl,spice-{app,core}}+clang
    qemu-user+clang
    qemu-vhost-user-gpu+clang
    qemu-virtiofsd+clang
  )
  optdepends=("${_qemu_optdepends[@]}")
  conflicts=(qemu qemu-full)
  provides=("qemu=${pkgver}" qemu-full)

}
